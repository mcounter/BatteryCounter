///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.12.1.50500 for Atmel AVR       27/Jul/2014  21:44:36 /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\Projects\BatteryCounter\_micro\BattTX\Timer0Handler. /
//                    cpp                                                     /
//    Command line =  D:\Projects\BatteryCounter\_micro\BattTX\Timer0Handler. /
//                    cpp --cpu=m48pa -ms -o "D:\Projects\BatteryCounter\_mic /
//                    ro\BattTX\Release - Atmega48PA\Obj\" -D NDEBUG -lA      /
//                    "D:\Projects\BatteryCounter\_micro\BattTX\Release -     /
//                    Atmega48PA\List\" --initializers_in_flash               /
//                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e             /
//                    --eeprom_size 256 --dlib --dlib_config "C:\Program      /
//                    Files (x86)\IAR Systems\Embedded Workbench              /
//                    6.0\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" --eec++ -Ohs      /
//    List file    =  D:\Projects\BatteryCounter\_micro\BattTX\Release -      /
//                    Atmega48PA\List\Timer0Handler.s90                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Timer0Handler

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__cpu", "1"
        RTMODEL "__cpu_name", "ATmega48PA"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?SL_DIVMOD_L03

        PUBLIC ??disable
        FUNCTION ??disable,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??enable
        FUNCTION ??enable,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC ??init
        FUNCTION ??init,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??irqTimer0
        FUNCTION ??irqTimer0,021233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK `??irqTimer0??INTVEC 28`
        PUBWEAK _A_DDRC
        PUBWEAK _A_OCR0A
        PUBWEAK _A_OCR0B
        PUBWEAK _A_PORTC
        PUBWEAK _A_TCCR0A
        PUBWEAK _A_TCCR0B
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TIMSK0
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Notused
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI Y SameValue
          CFI EndCommon cfiCommon1
        
        
          CFI Common cfiCommon2 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon2
        
`?<Name GLOBAL 0>`  SYMBOL "GLOBAL"
`?<Name DeviceProfile 1>` SYMBOL "DeviceProfile", `?<Name GLOBAL 0>`
??DeviceTransmitterConfig SYMBOL "DeviceTransmitterConfig", `?<Name DeviceProfile 1>`

`??irqTimer0??INTVEC 28` SYMBOL "??INTVEC 28", ??irqTimer0

        EXTERN ??DeviceTransmitterConfig
        EXTERN ??tick
        FUNCTION ??tick,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\Projects\BatteryCounter\_micro\BattTX\Timer0Handler.cpp
//    1 #ifndef __TIMER0HANDLER_CPP_
//    2 #define __TIMER0HANDLER_CPP_
//    3 
//    4 #include "Timer0Handler.h"

        ASEGN ABSOLUTE:DATA:NOROOT,06eH
// union <unnamed> volatile __io _A_TIMSK0
_A_TIMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,048H
// union <unnamed> volatile __io _A_OCR0B
_A_OCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,047H
// union <unnamed> volatile __io _A_OCR0A
_A_OCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,046H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,045H
// union <unnamed> volatile __io _A_TCCR0B
_A_TCCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,044H
// union <unnamed> volatile __io _A_TCCR0A
_A_TCCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,028H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,027H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS8 1
//    5 #include "MultyThreading.h"
//    6 
//    7 namespace Timer0Handler
//    8 {
//    9   #pragma vector=TIMER0_COMPA_vect

        RSEG CODE:CODE:NOROOT(1)
//   10   __interrupt void irqTimer0()
??irqTimer0:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ??irqTimer0
//   11   {
        FUNCALL ??irqTimer0, ??tick
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R3
          CFI R3 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R2
          CFI R2 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        IN      R24, 0x3F
//   12     unsigned char portOn = PORTC | (1<<IR_GENERATOR_BIT);
        IN      R17, 0x08
        ORI     R17, 0x01
//   13     unsigned char portOff = portOn ^ (1<<IR_GENERATOR_BIT);
        LDI     R16, 1
        MOV     R18, R17
        EOR     R18, R16
//   14 
//   15     PORTC = portOn;
        RCALL   ?Subroutine0
//   16     PORTC = portOff;
//   17     __no_operation();
//   18     __no_operation();
//   19     PORTC = portOn;
//   20     PORTC = portOff;
//   21     __no_operation();
//   22     __no_operation();
//   23     PORTC = portOn;
//   24     PORTC = portOff;
//   25     __no_operation();
??CrossCallReturnLabel_1:
        NOP
//   26     __no_operation();
        NOP
//   27     PORTC = portOn;
        RCALL   ?Subroutine0
//   28     PORTC = portOff;
//   29     __no_operation();
//   30     __no_operation();
//   31     PORTC = portOn;
//   32     PORTC = portOff;
//   33     __no_operation();
//   34     __no_operation();
//   35     PORTC = portOn;
//   36     PORTC = portOff;
//   37 
//   38     GLOBAL::MultyThreading::tick();
??CrossCallReturnLabel_2:
        RCALL   ??tick
//   39   }
        OUT     0x3F, R24
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+14
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+13
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+12
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+11
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+10
        LD      R21, Y+
          CFI R21 SameValue
          CFI CFA_Y Y+9
        LD      R22, Y+
          CFI R22 SameValue
          CFI CFA_Y Y+8
        LD      R23, Y+
          CFI R23 SameValue
          CFI CFA_Y Y+7
        LD      R0, Y+
          CFI R0 SameValue
          CFI CFA_Y Y+6
        LD      R1, Y+
          CFI R1 SameValue
          CFI CFA_Y Y+5
        LD      R2, Y+
          CFI R2 SameValue
          CFI CFA_Y Y+4
        LD      R3, Y+
          CFI R3 SameValue
          CFI CFA_Y Y+3
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+2
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+1
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
        REQUIRE _A_PORTC

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function ??irqTimer0
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R16 Frame(CFA_Y, -15)
          CFI R17 Frame(CFA_Y, -14)
          CFI R18 Frame(CFA_Y, -13)
          CFI R19 Frame(CFA_Y, -12)
          CFI R20 Frame(CFA_Y, -11)
          CFI R21 Frame(CFA_Y, -10)
          CFI R22 Frame(CFA_Y, -9)
          CFI R23 Frame(CFA_Y, -8)
          CFI R0 Frame(CFA_Y, -7)
          CFI R1 Frame(CFA_Y, -6)
          CFI R2 Frame(CFA_Y, -5)
          CFI R3 Frame(CFA_Y, -4)
          CFI R30 Frame(CFA_Y, -3)
          CFI R31 Frame(CFA_Y, -2)
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+15
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function ??irqTimer0
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond2) R16 Frame(CFA_Y, -15)
          CFI (cfiCond2) R17 Frame(CFA_Y, -14)
          CFI (cfiCond2) R18 Frame(CFA_Y, -13)
          CFI (cfiCond2) R19 Frame(CFA_Y, -12)
          CFI (cfiCond2) R20 Frame(CFA_Y, -11)
          CFI (cfiCond2) R21 Frame(CFA_Y, -10)
          CFI (cfiCond2) R22 Frame(CFA_Y, -9)
          CFI (cfiCond2) R23 Frame(CFA_Y, -8)
          CFI (cfiCond2) R0 Frame(CFA_Y, -7)
          CFI (cfiCond2) R1 Frame(CFA_Y, -6)
          CFI (cfiCond2) R2 Frame(CFA_Y, -5)
          CFI (cfiCond2) R3 Frame(CFA_Y, -4)
          CFI (cfiCond2) R30 Frame(CFA_Y, -3)
          CFI (cfiCond2) R31 Frame(CFA_Y, -2)
          CFI (cfiCond2) R24 Frame(CFA_Y, -1)
          CFI (cfiCond2) CFA_SP SP+4
          CFI (cfiCond2) CFA_Y Y+15
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        OUT     0x08, R17
        OUT     0x08, R18
        RCALL   ?Subroutine1
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
??CrossCallReturnLabel_0:
        REQUIRE ?Subroutine1
        ;               // Fall through to label ?Subroutine1

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function ??irqTimer0
          CFI Conditional ??CrossCallReturnLabel_0, ??CrossCallReturnLabel_1
          CFI R16 Frame(CFA_Y, -15)
          CFI R17 Frame(CFA_Y, -14)
          CFI R18 Frame(CFA_Y, -13)
          CFI R19 Frame(CFA_Y, -12)
          CFI R20 Frame(CFA_Y, -11)
          CFI R21 Frame(CFA_Y, -10)
          CFI R22 Frame(CFA_Y, -9)
          CFI R23 Frame(CFA_Y, -8)
          CFI R0 Frame(CFA_Y, -7)
          CFI R1 Frame(CFA_Y, -6)
          CFI R2 Frame(CFA_Y, -5)
          CFI R3 Frame(CFA_Y, -4)
          CFI R30 Frame(CFA_Y, -3)
          CFI R31 Frame(CFA_Y, -2)
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_SP SP+6
          CFI CFA_Y Y+15
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function ??irqTimer0
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_0, ??CrossCallReturnLabel_2
          CFI (cfiCond5) R16 Frame(CFA_Y, -15)
          CFI (cfiCond5) R17 Frame(CFA_Y, -14)
          CFI (cfiCond5) R18 Frame(CFA_Y, -13)
          CFI (cfiCond5) R19 Frame(CFA_Y, -12)
          CFI (cfiCond5) R20 Frame(CFA_Y, -11)
          CFI (cfiCond5) R21 Frame(CFA_Y, -10)
          CFI (cfiCond5) R22 Frame(CFA_Y, -9)
          CFI (cfiCond5) R23 Frame(CFA_Y, -8)
          CFI (cfiCond5) R0 Frame(CFA_Y, -7)
          CFI (cfiCond5) R1 Frame(CFA_Y, -6)
          CFI (cfiCond5) R2 Frame(CFA_Y, -5)
          CFI (cfiCond5) R3 Frame(CFA_Y, -4)
          CFI (cfiCond5) R30 Frame(CFA_Y, -3)
          CFI (cfiCond5) R31 Frame(CFA_Y, -2)
          CFI (cfiCond5) R24 Frame(CFA_Y, -1)
          CFI (cfiCond5) CFA_SP SP+6
          CFI (cfiCond5) CFA_Y Y+15
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ??irqTimer0
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond6) R16 Frame(CFA_Y, -15)
          CFI (cfiCond6) R17 Frame(CFA_Y, -14)
          CFI (cfiCond6) R18 Frame(CFA_Y, -13)
          CFI (cfiCond6) R19 Frame(CFA_Y, -12)
          CFI (cfiCond6) R20 Frame(CFA_Y, -11)
          CFI (cfiCond6) R21 Frame(CFA_Y, -10)
          CFI (cfiCond6) R22 Frame(CFA_Y, -9)
          CFI (cfiCond6) R23 Frame(CFA_Y, -8)
          CFI (cfiCond6) R0 Frame(CFA_Y, -7)
          CFI (cfiCond6) R1 Frame(CFA_Y, -6)
          CFI (cfiCond6) R2 Frame(CFA_Y, -5)
          CFI (cfiCond6) R3 Frame(CFA_Y, -4)
          CFI (cfiCond6) R30 Frame(CFA_Y, -3)
          CFI (cfiCond6) R31 Frame(CFA_Y, -2)
          CFI (cfiCond6) R24 Frame(CFA_Y, -1)
          CFI (cfiCond6) CFA_SP SP+4
          CFI (cfiCond6) CFA_Y Y+15
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ??irqTimer0
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond7) R16 Frame(CFA_Y, -15)
          CFI (cfiCond7) R17 Frame(CFA_Y, -14)
          CFI (cfiCond7) R18 Frame(CFA_Y, -13)
          CFI (cfiCond7) R19 Frame(CFA_Y, -12)
          CFI (cfiCond7) R20 Frame(CFA_Y, -11)
          CFI (cfiCond7) R21 Frame(CFA_Y, -10)
          CFI (cfiCond7) R22 Frame(CFA_Y, -9)
          CFI (cfiCond7) R23 Frame(CFA_Y, -8)
          CFI (cfiCond7) R0 Frame(CFA_Y, -7)
          CFI (cfiCond7) R1 Frame(CFA_Y, -6)
          CFI (cfiCond7) R2 Frame(CFA_Y, -5)
          CFI (cfiCond7) R3 Frame(CFA_Y, -4)
          CFI (cfiCond7) R30 Frame(CFA_Y, -3)
          CFI (cfiCond7) R31 Frame(CFA_Y, -2)
          CFI (cfiCond7) R24 Frame(CFA_Y, -1)
          CFI (cfiCond7) CFA_SP SP+4
          CFI (cfiCond7) CFA_Y Y+15
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        NOP
        NOP
        OUT     0x08, R17
        OUT     0x08, R18
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
//   40 

        RSEG CODE:CODE:NOROOT(1)
//   41   __monitor void disable()
??disable:
          CFI Block cfiBlock9 Using cfiCommon2
          CFI Function ??disable
//   42   {
        IN      R17, 0x3F
        CLI
//   43     TIMSK0 = 0x00;
        LDI     R16, 0
        STS     _A_TIMSK0, R16
//   44   }
        OUT     0x3F, R17
        RET
          CFI EndBlock cfiBlock9
        REQUIRE _A_TIMSK0
//   45 

        RSEG CODE:CODE:NOROOT(1)
//   46   __monitor void enable()
??enable:
          CFI Block cfiBlock10 Using cfiCommon2
          CFI Function ??enable
//   47   {
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        IN      R24, 0x3F
        CLI
//   48     unsigned char curTimerDiscreteness = timerDiscreteness;
        LDI     R16, 4
//   49     if (GLOBAL::DeviceProfile::DeviceTransmitterConfig.transmitterMode == GLOBAL::DeviceProfile::DeviceTransmitterMode_NoDetetion)
        LDS     R17, ??DeviceTransmitterConfig
        TST     R17
        BRNE    ??enable_1
//   50     {
//   51       curTimerDiscreteness *= NODETECTION_PRESCALER_LEVEL;
        LDI     R16, 12
//   52     }
//   53 
//   54     TCCR0A = (1<<WGM01);  // CTC mode
??enable_1:
        LDI     R17, 2
        OUT     0x24, R17
//   55     TCCR0B = (1<<CS01);   // div 8
        OUT     0x25, R17
//   56     OCR0A = (((clockFrequency/8) * curTimerDiscreteness)/1000) - 1;
        MOV     R20, R16
        LDI     R22, 0
        LDI     R23, 0
        LDI     R16, 128
        LDI     R17, 62
        LDI     R19, 0
        MUL     R17, R20
        MOV     R17, R0
        MOV     R18, R1
        MUL     R16, R20
        MOV     R16, R0
        ADD     R17, R1
        ADC     R18, R22
        ADC     R19, R22
        LDI     R20, 232
        LDI     R21, 3
        RCALL   ?SL_DIVMOD_L03
        DEC     R16
        OUT     0x27, R16
//   57     OCR0B = 0x00;
        LDI     R16, 0
        OUT     0x28, R16
//   58     TCNT0 = 0x00;
        OUT     0x26, R16
//   59 
//   60     TIMSK0 = (1<<OCIE0A);
        LDI     R16, 2
        STS     _A_TIMSK0, R16
//   61   }
        OUT     0x3F, R24
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock10
        REQUIRE _A_TCCR0A
        REQUIRE _A_TCCR0B
        REQUIRE _A_OCR0A
        REQUIRE _A_OCR0B
        REQUIRE _A_TCNT0
        REQUIRE _A_TIMSK0
//   62 

        RSEG CODE:CODE:NOROOT(1)
//   63   __monitor void init()
??init:
          CFI Block cfiBlock11 Using cfiCommon2
          CFI Function ??init
//   64   {
        FUNCALL ??init, ??disable
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??init, ??enable
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        IN      R24, 0x3F
        CLI
//   65     disable();
        RCALL   ??disable
//   66 
//   67     INDICATOR_LED_DIR = 1;
        SBI     0x07, 0x02
//   68     INDICATOR_LED_PORT = 0;
        CBI     0x08, 0x02
//   69 
//   70     enable();
        RCALL   ??enable
//   71   }
        OUT     0x3F, R24
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock11
        REQUIRE _A_DDRC
        REQUIRE _A_PORTC

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 28
`??irqTimer0??INTVEC 28`:
        RJMP    ??irqTimer0

        END
//   72 }
//   73 
//   74 #endif
//   75 
// 
//   8 bytes in segment ABSOLUTE
// 216 bytes in segment CODE
//   2 bytes in segment INTVEC
// 
// 216 bytes of CODE memory (+ 2 bytes shared)
//   0 bytes of DATA memory (+ 8 bytes shared)
//
//Errors: none
//Warnings: none

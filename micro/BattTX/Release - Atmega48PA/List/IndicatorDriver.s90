///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.12.1.50500 for Atmel AVR       27/Jul/2014  21:44:35 /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\Projects\BatteryCounter\_micro\BattTX\IndicatorDrive /
//                    r.cpp                                                   /
//    Command line =  D:\Projects\BatteryCounter\_micro\BattTX\IndicatorDrive /
//                    r.cpp --cpu=m48pa -ms -o "D:\Projects\BatteryCounter\_m /
//                    icro\BattTX\Release - Atmega48PA\Obj\" -D NDEBUG -lA    /
//                    "D:\Projects\BatteryCounter\_micro\BattTX\Release -     /
//                    Atmega48PA\List\" --initializers_in_flash               /
//                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e             /
//                    --eeprom_size 256 --dlib --dlib_config "C:\Program      /
//                    Files (x86)\IAR Systems\Embedded Workbench              /
//                    6.0\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" --eec++ -Ohs      /
//    List file    =  D:\Projects\BatteryCounter\_micro\BattTX\Release -      /
//                    Atmega48PA\List\IndicatorDriver.s90                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME IndicatorDriver

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__cpu", "1"
        RTMODEL "__cpu_name", "ATmega48PA"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?US_DIVMOD_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC ??blinkLightLng
        PUBLIC ??blinkNum
        PUBLIC ??blinkPauseLng
        PUBLIC ??blinkStatusOn
        PUBLIC ??init
        FUNCTION ??init,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??ready
        FUNCTION ??ready,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??run
        FUNCTION ??run,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??schedule
        FUNCTION ??schedule,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC ??switchOff
        FUNCTION ??switchOff,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??switchOn
        FUNCTION ??switchOn,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_DDRC
        PUBWEAK _A_PORTC
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Notused
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI Y SameValue
          CFI EndCommon cfiCommon1
        
`?<Name IndicatorDriver 6>` SYMBOL "IndicatorDriver"
??blinkLightLng     SYMBOL "blinkLightLng", `?<Name IndicatorDriver 6>`
??blinkNum          SYMBOL "blinkNum", `?<Name IndicatorDriver 6>`
??blinkPauseLng     SYMBOL "blinkPauseLng", `?<Name IndicatorDriver 6>`
??blinkStatusOn     SYMBOL "blinkStatusOn", `?<Name IndicatorDriver 6>`

        EXTERN ??getTimer
        FUNCTION ??getTimer,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN ??setTimer
        FUNCTION ??setTimer,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\Projects\BatteryCounter\_micro\BattTX\IndicatorDriver.cpp
//    1 #ifndef __INDICATORDRIVER_CPP_
//    2 #define __INDICATORDRIVER_CPP_
//    3 
//    4 #include "IndicatorDriver.h"
//    5 #include "GlobalSpace.h"

        ASEGN ABSOLUTE:DATA:NOROOT,028H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,027H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS8 1
//    6 #include "MultyThreading.h"
//    7 
//    8 #define INDICATOR_BLINK_DISCRETENESS_MS       (50)
//    9 
//   10 namespace IndicatorDriver
//   11 {

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   12   unsigned char blinkNum = 0;
??blinkNum:
        DS8 1
//   13   unsigned char blinkLightLng = 0;
??blinkLightLng:
        DS8 1
//   14   unsigned char blinkPauseLng = 0;
??blinkPauseLng:
        DS8 1
//   15 
//   16   bool blinkStatusOn = false;
??blinkStatusOn:
        DS8 1
//   17 

        RSEG CODE:CODE:NOROOT(1)
//   18   __monitor void init()
??init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ??init
//   19   {
        IN      R17, 0x3F
        CLI
//   20     INDICATOR_LED_DIR = 1;
        SBI     0x07, 0x02
//   21     INDICATOR_LED_PORT = 0;
        CBI     0x08, 0x02
//   22 
//   23     blinkNum = 0;
        LDI     R16, 0
        STS     ??blinkNum, R16
//   24     blinkStatusOn = 0;
        STS     (??blinkNum + 3), R16
//   25   }
        OUT     0x3F, R17
        RET
          CFI EndBlock cfiBlock0
        REQUIRE _A_DDRC
        REQUIRE _A_PORTC
//   26 

        RSEG CODE:CODE:NOROOT(1)
//   27   void switchOn()
??switchOn:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ??switchOn
//   28   {
//   29     INDICATOR_LED_DIR = 1;
        FUNCALL ??switchOn, ??setTimer
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        SBI     0x07, 0x02
//   30     INDICATOR_LED_PORT = 1;
        SBI     0x08, 0x02
//   31 
//   32     blinkStatusOn = true;
        LDI     R16, 1
        STS     (??blinkNum + 3), R16
//   33 
//   34     GLOBAL::MultyThreading::setTimer(GLOBALTIMERS_INDICATOR_WAITINGTIMER, blinkLightLng * INDICATOR_BLINK_DISCRETENESS_MS);
        LDS     R17, (??blinkNum + 1)
        RCALL   ?Subroutine0
??CrossCallReturnLabel_0:
        RJMP    ??setTimer
          CFI EndBlock cfiBlock1
        REQUIRE _A_DDRC
        REQUIRE _A_PORTC
//   35   }
//   36 

        RSEG CODE:CODE:NOROOT(1)
//   37   void switchOff()
??switchOff:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ??switchOff
//   38   {
//   39     INDICATOR_LED_DIR = 1;
        FUNCALL ??switchOff, ??setTimer
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        SBI     0x07, 0x02
//   40     INDICATOR_LED_PORT = 0;
        CBI     0x08, 0x02
//   41 
//   42     blinkStatusOn = false;
        LDI     R30, LOW(??blinkNum)
        LDI     R31, (??blinkNum) >> 8
        LDI     R16, 0
        STD     Z+3, R16
//   43 
//   44     if (blinkNum > 1)
        LD      R16, Z
        CPI     R16, 2
        BRCS    ??switchOff_1
//   45     {
//   46       blinkNum--;
        DEC     R16
        ST      Z, R16
//   47       GLOBAL::MultyThreading::setTimer(GLOBALTIMERS_INDICATOR_WAITINGTIMER, blinkPauseLng * INDICATOR_BLINK_DISCRETENESS_MS);
        LDD     R17, Z+2
        RCALL   ?Subroutine0
//   48     }
??CrossCallReturnLabel_1:
        RJMP    ??setTimer
//   49     else
//   50     {
//   51       blinkNum = 0;
??switchOff_1:
        LDI     R16, 0
        ST      Z, R16
//   52     }
//   53   }
        RET
          CFI EndBlock cfiBlock2
        REQUIRE _A_DDRC
        REQUIRE _A_PORTC

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function ??switchOn
          CFI Conditional ??CrossCallReturnLabel_0
          CFI CFA_SP SP+4
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function ??switchOff
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) CFA_SP SP+4
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        LDI     R16, 50
        MUL     R17, R16
        MOVW    R19:R18, R1:R0
        LDI     R16, 2
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//   54 

        RSEG CODE:CODE:NOROOT(1)
//   55   void schedule(unsigned char _blinkNum, unsigned short _blinkLightLng, unsigned short _blinkPauseLng)
??schedule:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ??schedule
//   56   {
        FUNCALL ??schedule, ??switchOn
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOV     R22, R16
        MOVW    R17:R16, R19:R18
        MOVW    R25:R24, R21:R20
        STS     ??blinkNum, R22
//   57     blinkNum = _blinkNum;
//   58     blinkLightLng = _blinkLightLng / INDICATOR_BLINK_DISCRETENESS_MS;
        LDI     R20, 50
        LDI     R21, 0
        RCALL   ?US_DIVMOD_L02
        STS     (??blinkNum + 1), R16
//   59     blinkPauseLng = _blinkPauseLng / INDICATOR_BLINK_DISCRETENESS_MS;
        LDI     R20, 50
        LDI     R21, 0
        MOVW    R17:R16, R25:R24
        RCALL   ?US_DIVMOD_L02
        STS     (??blinkNum + 2), R16
//   60 
//   61     switchOn();
        RCALL   ??switchOn
//   62   }
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock6
//   63 

        RSEG CODE:CODE:NOROOT(1)
//   64   bool ready()
??ready:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ??ready
//   65   {
//   66     return (blinkNum <= 0);
        LDS     R16, ??blinkNum
        TST     R16
        BRNE    ??ready_1
        LDI     R16, 1
        RET
??ready_1:
        LDI     R16, 0
        RET
          CFI EndBlock cfiBlock7
//   67   }
//   68 

        RSEG CODE:CODE:NOROOT(1)
//   69   void run()
??run:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ??run
//   70   {
//   71     if (blinkNum <= 0)
        FUNCALL ??run, ??getTimer
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??run, ??switchOff
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??run, ??switchOn
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDS     R16, ??blinkNum
        TST     R16
        BREQ    ??run_1
//   72     {
//   73       return;
//   74     }
//   75 
//   76     if (!GLOBAL::MultyThreading::getTimer(GLOBALTIMERS_INDICATOR_WAITINGTIMER))
        LDI     R16, 2
        RCALL   ??getTimer
        OR      R16, R17
        BRNE    ??run_1
//   77     {
//   78       if (blinkStatusOn)
        LDS     R16, (??blinkNum + 3)
        TST     R16
        BREQ    ??run_2
//   79       {
//   80         switchOff();
        RJMP    ??switchOff
//   81       }
//   82       else
//   83       {
//   84         switchOn();
??run_2:
        RCALL   ??switchOn
??run_1:
        RET
          CFI EndBlock cfiBlock8
//   85       }
//   86     }
//   87   }

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
//   88 }
//   89 
//   90 #endif
// 
//   2 bytes in segment ABSOLUTE
// 174 bytes in segment CODE
//   6 bytes in segment INITTAB
//   4 bytes in segment NEAR_Z
// 
// 174 bytes of CODE memory (+ 6 bytes shared)
//   4 bytes of DATA memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none

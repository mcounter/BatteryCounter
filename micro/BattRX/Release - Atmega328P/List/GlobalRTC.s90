///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.12.1.50500 for Atmel AVR       02/Aug/2014  01:50:54 /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\Projects\BatteryCounter\_micro\BattRX\GlobalRTC.cpp  /
//    Command line =  D:\Projects\BatteryCounter\_micro\BattRX\GlobalRTC.cpp  /
//                    --cpu=m328p -ms -o "D:\Projects\BatteryCounter\_micro\B /
//                    attRX\Release - Atmega328P\Obj\" -D NDEBUG -lA          /
//                    "D:\Projects\BatteryCounter\_micro\BattRX\Release -     /
//                    Atmega328P\List\" --initializers_in_flash               /
//                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e             /
//                    --eeprom_size 1024 --dlib --dlib_config "C:\Program     /
//                    Files (x86)\IAR Systems\Embedded Workbench              /
//                    6.0\avr\LIB\DLIB\dlAVR-3s-ec_mul-sf-n.h" --eec++ -Ohs   /
//    List file    =  D:\Projects\BatteryCounter\_micro\BattRX\Release -      /
//                    Atmega328P\List\GlobalRTC.s90                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME GlobalRTC

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega328P"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?SS_DIVMOD_L02
        EXTERN ?UC_DIVMOD_L01
        EXTERN ?US_DIVMOD_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC ??RTCConfig
        PUBLIC ??RTCDateTime
        PUBLIC ??clearTicks
        FUNCTION ??clearTicks,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??correctDateTime
        FUNCTION ??correctDateTime,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??counterValue
        PUBLIC ??cycleTimerLowBatteryCheck
        PUBLIC ??getIdleTime
        FUNCTION ??getIdleTime,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??init
        FUNCTION ??init,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??isLeapYear
        FUNCTION ??isLeapYear,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC ??isSummerTime
        FUNCTION ??isSummerTime,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC ??processIdleTime
        FUNCTION ??processIdleTime,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC ??setDate
        FUNCTION ??setDate,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??setDateTime
        FUNCTION ??setDateTime,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC ??setDateTime_1
        FUNCTION ??setDateTime_1,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??setDateTime_2
        FUNCTION ??setDateTime_2,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??setSummerTimeRule
        FUNCTION ??setSummerTimeRule,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??setTime
        FUNCTION ??setTime,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??tick
        FUNCTION ??tick,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ??weekDay
        FUNCTION ??weekDay,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Notused
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI Y SameValue
          CFI EndCommon cfiCommon1
        
        
          CFI Common cfiCommon2 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+1
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon2
        
`?<Name GLOBAL 5>`  SYMBOL "GLOBAL"
`?<Name RTC 20>`    SYMBOL "RTC", `?<Name GLOBAL 5>`
??RTCConfig         SYMBOL "RTCConfig", `?<Name RTC 20>`
??RTCDateTime       SYMBOL "RTCDateTime", `?<Name RTC 20>`
??counterValue      SYMBOL "counterValue", `?<Name RTC 20>`
??cycleTimerLowBatteryCheck SYMBOL "cycleTimerLowBatteryCheck", `?<Name RTC 20>`

        EXTERN ??calcIsDeviceActiveBySchedule
        FUNCTION ??calcIsDeviceActiveBySchedule,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN ??isDeviceActiveBySchedule
        FUNCTION ??isDeviceActiveBySchedule,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN ??isLowBatteryVoltage
        FUNCTION ??isLowBatteryVoltage,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN ??saveDeviceStatus
        FUNCTION ??saveDeviceStatus,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN ??schedule
        FUNCTION ??schedule,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN ??setUpdateCounter
        FUNCTION ??setUpdateCounter,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN ??startConversion
        FUNCTION ??startConversion,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\Projects\BatteryCounter\_micro\BattRX\GlobalRTC.cpp
//    1 #ifndef __GLOBALRTC_CPP_
//    2 #define __GLOBALRTC_CPP_
//    3 
//    4 #include "GlobalRTC.h"
//    5 #include "GlobalSpace.h"
//    6 #include "GlobalCounter.h"
//    7 #include "DeviceManager.h"
//    8 #include "GlobalADC.h"
//    9 #include "MainThread.h"
//   10 #include "IndicatorDriver.h"
//   11 
//   12 #define LOW_BATTERY_CHECK_PERIOD_MIN        (15)
//   13 
//   14 namespace GLOBAL
//   15 {
//   16   namespace RTC
//   17   {

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//   18     const unsigned char DaysInMonth[2][13] = {{0,31,28,31,30,31,30,31,31,30,31,30,31},
??DaysInMonth:
        DS8 26
        REQUIRE `?<Initializer for DaysInMonth>`
//   19                                               {0,31,29,31,30,31,30,31,31,30,31,30,31}};
//   20 
//   21     TRTCConfig RTCConfig;
//   22     TRTCDateTime RTCDateTime;

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   23     volatile unsigned char counterValue = 0;
??counterValue:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
??RTCDateTime:
        DS8 10
        REQUIRE `?<Initializer for RTCDateTime>`
??RTCConfig:
        DS8 1
        REQUIRE `?<Initializer for RTCConfig>`
//   24 
//   25     unsigned char cycleTimerLowBatteryCheck = LOW_BATTERY_CHECK_PERIOD_MIN;
??cycleTimerLowBatteryCheck:
        DS8 1
        REQUIRE `?<Initializer for cycleTimerLowBatteryCheck>`
//   26 

        RSEG CODE:CODE:NOROOT(1)
//   27     bool isLeapYear(unsigned short _year)
??isLeapYear:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ??isLeapYear
//   28     {
        MOVW    R19:R18, R25:R24
        MOVW    R25:R24, R17:R16
//   29       return (((_year % 4) == 0) && ((_year % 100) != 0)) || ((_year % 400) == 0);
        ANDI    R16, 0x03
        BRNE    ??isLeapYear_1
        LDI     R20, 100
        LDI     R21, 0
        MOV     R16, R24
        RCALL   ??Subroutine16_0
??CrossCallReturnLabel_33:
        OR      R20, R1
        BRNE    ??isLeapYear_2
??isLeapYear_1:
        LDI     R20, 144
        LDI     R21, 1
        MOVW    R17:R16, R25:R24
        RCALL   ??Subroutine16_0
??CrossCallReturnLabel_34:
        OR      R20, R1
        BRNE    ??isLeapYear_3
??isLeapYear_2:
        LDI     R16, 1
        RJMP    ??isLeapYear_4
??isLeapYear_3:
        LDI     R16, 0
??isLeapYear_4:
        MOVW    R25:R24, R19:R18
        RET
          CFI EndBlock cfiBlock0
//   30     }
//   31 

        RSEG CODE:CODE:NOROOT(1)
//   32     unsigned char weekDay(unsigned short _year, unsigned char _month, unsigned char _day)
??weekDay:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ??weekDay
//   33     {
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        MOVW    R3:R2, R27:R26
        MOVW    R23:R22, R25:R24
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R7:R6, R17:R16
        MOV     R26, R19
//   34       unsigned char a = (14 - _month) / 12;
        MOV     R24, R18
        LDI     R25, 0
        LDI     R16, 14
        LDI     R17, 0
        SUB     R16, R18
        RCALL   ?Subroutine1
??CrossCallReturnLabel_25:
        MOV     R4, R16
//   35       unsigned short y = _year - a;
        SUB     R6, R16
        SBC     R7, R25
//   36       unsigned short m = _month + (12 * a) - 2;
//   37 
//   38       return (((unsigned short)_day) - 1 + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;
        LDI     R27, 0
        ADD     R26, R6
        ADC     R27, R7
        MOVW    R17:R16, R7:R6
        LSR     R17
        ROR     R16
        LSR     R17
        ROR     R16
        ADD     R26, R16
        ADC     R27, R17
        SBIW    R27:R26, 1
        LDI     R20, 100
        LDI     R21, 0
        RCALL   ?Subroutine2
??CrossCallReturnLabel_38:
        SUB     R26, R16
        SBC     R27, R17
        LDI     R20, 144
        LDI     R21, 1
        RCALL   ?Subroutine2
??CrossCallReturnLabel_39:
        ADD     R26, R16
        ADC     R27, R17
        LDI     R16, 12
        MUL     R4, R16
        ADD     R24, R0
        ADC     R25, R1
        SBIW    R25:R24, 2
        LDI     R16, 31
        MUL     R16, R25
        MOV     R17, R0
        MUL     R16, R24
        MOV     R16, R0
        ADD     R17, R1
        LDI     R20, 12
        LDI     R21, 0
        RCALL   ??Subroutine16_0
??CrossCallReturnLabel_35:
        ADD     R16, R26
        ADC     R17, R27
        LDI     R20, 7
        LDI     R21, 0
        RCALL   ??Subroutine16_0
??CrossCallReturnLabel_36:
        MOV     R16, R20
        MOVW    R25:R24, R23:R22
        MOVW    R27:R26, R3:R2
        LD      R4, Y+
          CFI R2 R26
          CFI R22 R24
          CFI R24 R22
          CFI R26 R2
          CFI R4 SameValue
          CFI CFA_Y Y+2
        LD      R6, Y+
          CFI R6 SameValue
          CFI CFA_Y Y+1
        LD      R7, Y+
          CFI R7 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock1
//   39     }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function ??weekDay
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R4 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+3
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function ??weekDay
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond3) R4 Frame(CFA_Y, -3)
          CFI (cfiCond3) R6 Frame(CFA_Y, -2)
          CFI (cfiCond3) R7 Frame(CFA_Y, -1)
          CFI (cfiCond3) CFA_SP SP+4
          CFI (cfiCond3) CFA_Y Y+3
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOVW    R17:R16, R7:R6
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine16_0
        ;               // Fall through to label ??Subroutine16_0

        RSEG CODE:CODE:NOROOT(1)
??Subroutine16_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ??isLeapYear
          CFI Conditional ??CrossCallReturnLabel_33
          CFI CFA_SP SP+4
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ??isLeapYear
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond6) CFA_SP SP+4
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ??weekDay
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond7) R4 Frame(CFA_Y, -3)
          CFI (cfiCond7) R6 Frame(CFA_Y, -2)
          CFI (cfiCond7) R7 Frame(CFA_Y, -1)
          CFI (cfiCond7) CFA_SP SP+4
          CFI (cfiCond7) CFA_Y Y+3
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function ??weekDay
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond8) R4 Frame(CFA_Y, -3)
          CFI (cfiCond8) R6 Frame(CFA_Y, -2)
          CFI (cfiCond8) R7 Frame(CFA_Y, -1)
          CFI (cfiCond8) CFA_SP SP+4
          CFI (cfiCond8) CFA_Y Y+3
          CFI Block cfiCond9 Using cfiCommon2
          CFI (cfiCond9) Function ??setDateTime
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond9) R24 Frame(CFA_Y, -10)
          CFI (cfiCond9) R25 Frame(CFA_Y, -9)
          CFI (cfiCond9) R26 Frame(CFA_Y, -8)
          CFI (cfiCond9) R27 Frame(CFA_Y, -7)
          CFI (cfiCond9) R4 Frame(CFA_Y, -6)
          CFI (cfiCond9) R5 Frame(CFA_Y, -5)
          CFI (cfiCond9) R6 Frame(CFA_Y, -4)
          CFI (cfiCond9) R7 Frame(CFA_Y, -3)
          CFI (cfiCond9) R8 Frame(CFA_Y, -2)
          CFI (cfiCond9) CFA_SP SP+4
          CFI (cfiCond9) CFA_Y Y+10
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function ??weekDay
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond10) R4 Frame(CFA_Y, -3)
          CFI (cfiCond10) R6 Frame(CFA_Y, -2)
          CFI (cfiCond10) R7 Frame(CFA_Y, -1)
          CFI (cfiCond10) CFA_SP SP+4
          CFI (cfiCond10) CFA_Y Y+3
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function ??weekDay
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond11) R4 Frame(CFA_Y, -3)
          CFI (cfiCond11) R6 Frame(CFA_Y, -2)
          CFI (cfiCond11) R7 Frame(CFA_Y, -1)
          CFI (cfiCond11) CFA_SP SP+4
          CFI (cfiCond11) CFA_Y Y+3
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        JMP     ?US_DIVMOD_L02
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
//   40 

        RSEG CODE:CODE:NOROOT(1)
//   41     bool isSummerTime(TRTCDateTime* _dateTime, bool _applied = false)
??isSummerTime:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ??isSummerTime
//   42     {
        MOV     R2, R4
        MOVW    R23:R22, R27:R26
        MOV     R19, R25
        REQUIRE ?Register_R4_is_cg_reg
        MOVW    R27:R26, R17:R16
//   43       unsigned char changeDate;
//   44 
//   45       switch (RTCConfig.summerTimeRule)
        LDS     R16, (??RTCDateTime + 10)
        DEC     R16
        BREQ    ??isSummerTime_1
        DEC     R16
        BRNE    ??isSummerTime_2
//   46       {
//   47         case SummerTimeRule_On:
//   48           return true;
//   49 
//   50         case SummerTimeRule_Ukraine:
//   51           if ((_dateTime->month > 3) && (_dateTime->month < 10))
        MOV     R30, R26
        MOV     R31, R17
        LDD     R16, Z+2
        MOV     R17, R16
        SUBI    R17, 4
        CPI     R17, 6
        BRCS    ??isSummerTime_1
//   52           {
//   53             return true;
//   54           }
//   55           else
//   56           if (_dateTime->month == 3)
??isSummerTime_3:
        CPI     R16, 3
        BRNE    ??isSummerTime_4
//   57           {
//   58             changeDate = 31 - ((_dateTime->weekDay + 31 - _dateTime->day + 1) % 7);
        RCALL   ?Subroutine0
??CrossCallReturnLabel_0:
        MOV     R16, R25
//   59             return ((_dateTime->day > changeDate) ||
//   60                     ((_dateTime->day = changeDate) && (_dateTime->hour >= (_applied ? 4 : 3))));
        CP      R16, R4
        BRCS    ??isSummerTime_1
        MOVW    R31:R30, R27:R26
        STD     Z+3, R25
        TST     R25
        BREQ    ??isSummerTime_2
        RCALL   ?Subroutine5
//   61           }
??CrossCallReturnLabel_6:
        BRCS    ??isSummerTime_2
        RJMP    ??isSummerTime_1
//   62           else
//   63           if (_dateTime->month == 10)
??isSummerTime_4:
        CPI     R16, 10
        BRNE    ??isSummerTime_2
//   64           {
//   65             changeDate = 31 - ((_dateTime->weekDay + 31 - _dateTime->day + 1) % 7);
        RCALL   ?Subroutine0
//   66             return ((_dateTime->day < changeDate) ||
//   67                     ((_dateTime->day = changeDate) && (_dateTime->hour < (_applied ? 4 : 3))));
??CrossCallReturnLabel_1:
        CP      R4, R25
        BRCS    ??isSummerTime_1
        MOVW    R31:R30, R27:R26
        STD     Z+3, R25
        TST     R25
        BREQ    ??isSummerTime_2
        RCALL   ?Subroutine5
//   68           }
//   69 
//   70           return false;
//   71       }
??CrossCallReturnLabel_7:
        BRCC    ??isSummerTime_2
??isSummerTime_1:
        LDI     R16, 1
        RJMP    ??isSummerTime_5
//   72 
//   73       return false;
??isSummerTime_2:
        LDI     R16, 0
??isSummerTime_5:
        MOV     R25, R19
        MOVW    R27:R26, R23:R22
        MOV     R4, R2
        RET
          CFI EndBlock cfiBlock13
//   74     }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine5:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function ??isSummerTime
          CFI Conditional ??CrossCallReturnLabel_6
          CFI CFA_SP SP+4
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function ??isSummerTime
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond15) CFA_SP SP+4
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        TST     R18
        BREQ    ??Subroutine5_0
        LDI     R16, 4
        RJMP    ??Subroutine5_1
??Subroutine5_0:
        LDI     R16, 3
??Subroutine5_1:
        LDD     R18, Z+4
        CP      R18, R16
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function ??isSummerTime
          CFI Conditional ??CrossCallReturnLabel_0
          CFI CFA_SP SP+4
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function ??isSummerTime
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond18) CFA_SP SP+4
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        LDD     R4, Z+3
        LDI     R25, 31
        LDD     R16, Z+7
        LDI     R17, 0
        SUBI    R16, 225
        SBCI    R17, 255
        SUB     R16, R4
        SBCI    R17, 0
        SUBI    R16, 255
        SBCI    R17, 255
        LDI     R20, 7
        RCALL   ?Subroutine13
??CrossCallReturnLabel_24:
        SUB     R25, R20
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
//   75 

        RSEG CODE:CODE:NOROOT(1)
//   76     __monitor void tick()
??tick:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function ??tick
//   77     {
        IN      R17, 0x3F
        CLI
//   78       counterValue++;
        LDI     R30, LOW(??counterValue)
        LDI     R31, (??counterValue) >> 8
        LD      R16, Z
        INC     R16
        ST      Z, R16
//   79     }
        OUT     0x3F, R17
        RET
          CFI EndBlock cfiBlock20
//   80 

        RSEG CODE:CODE:NOROOT(1)
//   81     __monitor unsigned char getIdleTime()
??getIdleTime:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function ??getIdleTime
//   82     {
        IN      R18, 0x3F
        CLI
//   83       unsigned char curIdleTime = counterValue;
        LDS     R16, ??counterValue
//   84       counterValue = 0;
        LDI     R17, 0
        STS     ??counterValue, R17
//   85 
//   86       return curIdleTime;
        OUT     0x3F, R18
        RET
          CFI EndBlock cfiBlock21
//   87     }
//   88 

        RSEG CODE:CODE:NOROOT(1)
//   89     __monitor void clearTicks()
??clearTicks:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function ??clearTicks
//   90     {
        IN      R17, 0x3F
        CLI
//   91       counterValue = 0;
        LDI     R16, 0
        STS     ??counterValue, R16
//   92     }
        OUT     0x3F, R17
        RET
          CFI EndBlock cfiBlock22
//   93 

        RSEG CODE:CODE:NOROOT(1)
//   94     void processIdleTime()
??processIdleTime:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function ??processIdleTime
//   95     {
        FUNCALL ??processIdleTime, ??getIdleTime
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??processIdleTime, ??isLeapYear
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??processIdleTime, ??isSummerTime
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??processIdleTime, ??isLowBatteryVoltage
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??processIdleTime, ??isDeviceActiveBySchedule
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??processIdleTime, ??schedule
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??processIdleTime, ??calcIsDeviceActiveBySchedule
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??processIdleTime, ??setUpdateCounter
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??processIdleTime, ??saveDeviceStatus
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??processIdleTime, ??startConversion
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        RCALL   ?Subroutine4
          CFI R24 Frame(CFA_Y, -5)
          CFI R25 Frame(CFA_Y, -4)
          CFI R26 Frame(CFA_Y, -3)
          CFI R27 Frame(CFA_Y, -2)
          CFI R4 Frame(CFA_Y, -1)
          CFI CFA_Y Y+5
??CrossCallReturnLabel_4:
        REQUIRE ?Register_R4_is_cg_reg
//   96       unsigned char curIdleTime = getIdleTime();
        RCALL   ??getIdleTime
        MOV     R24, R16
//   97 
//   98       if (!curIdleTime)
        TST     R16
        BRNE    $+2+2
        RJMP    ??processIdleTime_1
//   99       {
//  100         return;
//  101       }
//  102 
//  103       bool isHourChanged = false;
        CLR     R4
//  104       bool isMinuteChanged = false;
        LDI     R25, 0
        LDI     R26, LOW(??RTCDateTime)
        LDI     R27, (??RTCDateTime) >> 8
//  105 
//  106       while (curIdleTime)
//  107       {
//  108         unsigned char freeSeconds = 60 - RTCDateTime.second;
??processIdleTime_2:
        LDI     R16, 60
        LDS     R17, (??RTCDateTime + 6)
        SUB     R16, R17
//  109 
//  110         if (curIdleTime < freeSeconds)
        CP      R24, R16
        BRCC    ??processIdleTime_3
//  111         {
//  112           RTCDateTime.second += curIdleTime;
        MOVW    R31:R30, R27:R26
        MOV     R16, R17
        ADD     R16, R24
        STD     Z+6, R16
//  113           curIdleTime = 0;
        RJMP    ??processIdleTime_4
//  114         }
//  115         else
//  116         {
//  117           RTCDateTime.second = 0;
??processIdleTime_3:
        LDI     R17, 0
        STS     (??RTCDateTime + 6), R17
//  118           curIdleTime -= freeSeconds;
        SUB     R24, R16
//  119           isMinuteChanged = true;
        LDI     R25, 1
//  120 
//  121           if (cycleTimerLowBatteryCheck > 0)
        LDS     R16, (??RTCDateTime + 11)
        TST     R16
        BREQ    ??processIdleTime_5
//  122           {
//  123             cycleTimerLowBatteryCheck--;
        MOVW    R31:R30, R27:R26
        DEC     R16
        STD     Z+11, R16
//  124           }
//  125 
//  126           if (RTCDateTime.minute < 59)
??processIdleTime_5:
        LDS     R16, (??RTCDateTime + 5)
        CPI     R16, 59
        BRCC    ??processIdleTime_6
//  127           {
//  128             RTCDateTime.minute++;
        MOVW    R31:R30, R27:R26
        INC     R16
        STD     Z+5, R16
        RJMP    ??processIdleTime_7
//  129           }
//  130           else
//  131           {
//  132             RTCDateTime.minute = 0;
??processIdleTime_6:
        STS     (??RTCDateTime + 5), R17
//  133             isHourChanged = true;
        CLR     R4
        INC     R4
//  134 
//  135             if (RTCDateTime.hour < 23)
        LDS     R16, (??RTCDateTime + 4)
        CPI     R16, 23
        BRCC    ??processIdleTime_8
//  136             {
//  137               RTCDateTime.hour++;
        MOVW    R31:R30, R27:R26
        INC     R16
        STD     Z+4, R16
        RJMP    ??processIdleTime_9
//  138             }
//  139             else
//  140             {
//  141               RTCDateTime.hour = 0;
??processIdleTime_8:
        STS     (??RTCDateTime + 4), R17
//  142               RTCDateTime.weekDay = (RTCDateTime.weekDay + 1) % 7;
        LDS     R16, (??RTCDateTime + 7)
        SUBI    R16, 255
        SBCI    R17, 255
        LDI     R20, 7
        RCALL   ?Subroutine13
??CrossCallReturnLabel_22:
        STS     (??RTCDateTime + 7), R20
//  143 
//  144               if (RTCDateTime.day < DaysInMonth[RTCDateTime.leapYear][RTCDateTime.month])
        LDS     R16, (??RTCDateTime + 2)
        LDS     R18, (??RTCDateTime + 3)
        LDS     R19, (??RTCDateTime + 8)
        LDI     R17, 13
        MUL     R19, R17
        RCALL   ?Subroutine10
??CrossCallReturnLabel_16:
        LDI     R17, 0
        ADD     R30, R16
        ADC     R31, R17
        LD      R17, Z
        CP      R18, R17
        BRCC    ??processIdleTime_10
//  145               {
//  146                 RTCDateTime.day++;
        MOVW    R31:R30, R27:R26
        MOV     R16, R18
        INC     R16
        STD     Z+3, R16
        RJMP    ??processIdleTime_9
//  147               }
//  148               else
//  149               {
//  150                 RTCDateTime.day = 1;
??processIdleTime_10:
        STS     (??RTCDateTime + 3), R25
//  151 
//  152                 if (RTCDateTime.month < 12)
        CPI     R16, 12
        BRCC    ??processIdleTime_9
//  153                 {
//  154                   RTCDateTime.month = 1;
        STS     (??RTCDateTime + 2), R25
//  155                   RTCDateTime.year++;
        RCALL   ?Subroutine15
??CrossCallReturnLabel_29:
        SUBI    R16, 255
        SBCI    R17, 255
        ST      X, R17
        ST      -X, R16
//  156 
//  157                   RTCDateTime.leapYear = isLeapYear(RTCDateTime.year);
        RCALL   ??isLeapYear
        STS     (??RTCDateTime + 8), R16
//  158                 }
//  159               }
//  160             }
//  161 
//  162             bool newSummerTime = isSummerTime(&RTCDateTime, RTCDateTime.summerTime);
??processIdleTime_9:
        LDS     R18, (??RTCDateTime + 9)
        RCALL   ?Subroutine14
//  163             if (newSummerTime != RTCDateTime.summerTime)
??CrossCallReturnLabel_28:
        LDS     R17, (??RTCDateTime + 9)
        CP      R16, R17
        BREQ    ??processIdleTime_7
//  164             {
//  165               if (newSummerTime)
        LDS     R17, (??RTCDateTime + 4)
        TST     R16
        BREQ    ??processIdleTime_11
//  166               {
//  167                 if (RTCDateTime.hour < 23)
        CPI     R17, 23
        BRCC    ??processIdleTime_7
//  168                 {
//  169                   RTCDateTime.summerTime = true;
        STS     (??RTCDateTime + 9), R25
//  170                   RTCDateTime.hour++;
        MOVW    R31:R30, R27:R26
        MOV     R16, R17
        INC     R16
        RJMP    ??processIdleTime_12
//  171                 }
//  172               }
//  173               else
//  174               {
//  175                 if (RTCDateTime.hour > 0)
??processIdleTime_11:
        TST     R17
        BREQ    ??processIdleTime_7
//  176                 {
//  177                   RTCDateTime.summerTime = false;
        LDI     R16, 0
        STS     (??RTCDateTime + 9), R16
//  178                   RTCDateTime.hour--;
        MOVW    R31:R30, R27:R26
        MOV     R16, R17
        DEC     R16
??processIdleTime_12:
        STD     Z+4, R16
//  179                 }
//  180               }
//  181             }
//  182           }
//  183         }
//  184       }
??processIdleTime_7:
        TST     R24
        BREQ    $+2+2
        RJMP    ??processIdleTime_2
//  185 
//  186       if (!cycleTimerLowBatteryCheck)
??processIdleTime_4:
        LDS     R16, (??RTCDateTime + 11)
        TST     R16
        BRNE    ??processIdleTime_13
//  187       {
//  188         cycleTimerLowBatteryCheck = LOW_BATTERY_CHECK_PERIOD_MIN;
        LDI     R16, 15
        STS     (??RTCDateTime + 11), R16
//  189 
//  190         if (GLOBAL::ADC::isLowBatteryVoltage() && MainThread::isDeviceActiveBySchedule())
        CALL    ??isLowBatteryVoltage
        TST     R16
        BREQ    ??processIdleTime_13
        CALL    ??isDeviceActiveBySchedule
        TST     R16
        BREQ    ??processIdleTime_13
//  191         {
//  192           IndicatorDriver::schedule(3, 150, 250);
        LDI     R20, 250
        LDI     R21, 0
        LDI     R18, 150
        LDI     R19, 0
        LDI     R16, 3
        CALL    ??schedule
//  193         }
//  194       }
//  195 
//  196       if (isMinuteChanged)
??processIdleTime_13:
        TST     R25
        BREQ    ??processIdleTime_14
//  197       {
//  198         MainThread::calcIsDeviceActiveBySchedule();
        CALL    ??calcIsDeviceActiveBySchedule
//  199       }
//  200 
//  201       if (isHourChanged)
??processIdleTime_14:
        TST     R4
        BREQ    ??processIdleTime_1
//  202       {
//  203         GLOBAL::Counter::setUpdateCounter();
        CALL    ??setUpdateCounter
//  204         DeviceManager::saveDeviceStatus();
        CALL    ??saveDeviceStatus
//  205         GLOBAL::ADC::startConversion();
        CALL    ??startConversion
          CFI EndBlock cfiBlock23
//  206       }
??processIdleTime_1:
        REQUIRE ?Subroutine11
        ;               // Fall through to label ?Subroutine11
//  207     }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine11:
          CFI Block cfiCond24 Using cfiCommon2
          CFI Function ??setDateTime
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R24 Frame(CFA_Y, -10)
          CFI R25 Frame(CFA_Y, -9)
          CFI R26 Frame(CFA_Y, -8)
          CFI R27 Frame(CFA_Y, -7)
          CFI R4 Frame(CFA_Y, -6)
          CFI R5 Frame(CFA_Y, -5)
          CFI R6 Frame(CFA_Y, -4)
          CFI R7 Frame(CFA_Y, -3)
          CFI R8 Frame(CFA_Y, -2)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+10
          CFI Block cfiBlock25 Using cfiCommon0
          CFI (cfiBlock25) NoFunction
          CFI (cfiBlock25) CFA_Y Y+5
          CFI (cfiBlock25) R4 Frame(CFA_Y, -1)
          CFI (cfiBlock25) R24 Frame(CFA_Y, -5)
          CFI (cfiBlock25) R25 Frame(CFA_Y, -4)
          CFI (cfiBlock25) R26 Frame(CFA_Y, -3)
          CFI (cfiBlock25) R27 Frame(CFA_Y, -2)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        LD      R24, Y+
          CFI (cfiCond24) R24 SameValue
          CFI (cfiCond24) CFA_Y Y+9
          CFI (cfiBlock25) CFA_Y Y+4
          CFI (cfiBlock25) R24 SameValue
        LD      R25, Y+
          CFI (cfiCond24) R25 SameValue
          CFI (cfiCond24) CFA_Y Y+8
          CFI (cfiBlock25) CFA_Y Y+3
          CFI (cfiBlock25) R25 SameValue
        LD      R26, Y+
          CFI (cfiCond24) R26 SameValue
          CFI (cfiCond24) CFA_Y Y+7
          CFI (cfiBlock25) CFA_Y Y+2
          CFI (cfiBlock25) R26 SameValue
        LD      R27, Y+
          CFI (cfiCond24) R27 SameValue
          CFI (cfiCond24) CFA_Y Y+6
          CFI (cfiBlock25) CFA_Y Y+1
          CFI (cfiBlock25) R27 SameValue
        LD      R4, Y+
          CFI (cfiCond24) R4 SameValue
          CFI (cfiCond24) CFA_Y Y+5
          CFI (cfiBlock25) CFA_Y Y+0
          CFI (cfiBlock25) R4 SameValue
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiBlock25
          CFI EndBlock cfiPicker26
//  208 

        RSEG CODE:CODE:NOROOT(1)
//  209     void setDateTime(bool _setDate, unsigned short _year, unsigned char _month, unsigned char _day,
??setDateTime:
          CFI Block cfiBlock27 Using cfiCommon2
          CFI Function ??setDateTime
//  210                      bool _setTime, unsigned char _hour, unsigned char _minute, unsigned char _second)
//  211     {
        FUNCALL ??setDateTime, ??isLeapYear
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setDateTime, ??weekDay
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setDateTime, ??isSummerTime
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setDateTime, ??clearTicks
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setDateTime, ??calcIsDeviceActiveBySchedule
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setDateTime, ??setUpdateCounter
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setDateTime, ??saveDeviceStatus
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        RCALL   ?Subroutine4
          CFI R24 Frame(CFA_Y, -10)
          CFI R25 Frame(CFA_Y, -9)
          CFI R26 Frame(CFA_Y, -8)
          CFI R27 Frame(CFA_Y, -7)
          CFI R4 Frame(CFA_Y, -6)
          CFI CFA_Y Y+10
??CrossCallReturnLabel_5:
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        MOV     R4, R17
        MOV     R25, R20
        MOV     R7, R21
        MOV     R6, R22
        MOV     R5, R23
        LDD     R24, Y+9
//  212       if (_setDate)
        TST     R16
        BREQ    ??setDateTime_3
//  213       {
//  214         RTCDateTime.year = (_year > 1900) ? (_year % 10000) : 1900;
        CPI     R18, 109
        LDI     R16, 7
        CPC     R19, R16
        BRCS    ??setDateTime_4
        LDI     R20, 16
        LDI     R21, 39
        MOVW    R17:R16, R19:R18
        RCALL   ??Subroutine16_0
??CrossCallReturnLabel_37:
        RJMP    ??setDateTime_5
??setDateTime_4:
        LDI     R20, 108
        LDI     R21, 7
??setDateTime_5:
        LDI     R26, LOW(??RTCDateTime)
        LDI     R27, (??RTCDateTime) >> 8
        ST      X+, R20
        ST      X, R21
        SBIW    R27:R26, 1
//  215         RTCDateTime.leapYear = isLeapYear(RTCDateTime.year);
        RCALL   ?Subroutine6
??CrossCallReturnLabel_9:
        MOV     R8, R16
        STS     (??RTCDateTime + 8), R16
//  216         RTCDateTime.month = ((_month - 1) % 12) + 1;
        MOV     R16, R4
        LDI     R17, 0
        SUBI    R16, 1
        RCALL   ?Subroutine1
??CrossCallReturnLabel_26:
        MOV     R4, R20
        INC     R4
        STS     (??RTCDateTime + 2), R4
//  217         RTCDateTime.day = ((_day - 1) % DaysInMonth[RTCDateTime.leapYear][RTCDateTime.month]) + 1;
        MOV     R16, R25
        LDI     R17, 0
        SUBI    R16, 1
        SBCI    R17, 0
        LDI     R18, 13
        MUL     R8, R18
        RCALL   ?Subroutine10
??CrossCallReturnLabel_17:
        MOV     R18, R4
        LDI     R19, 0
        ADD     R30, R4
        ADC     R31, R19
        LD      R20, Z
        RCALL   ?Subroutine13
??CrossCallReturnLabel_23:
        MOV     R19, R20
        INC     R19
        STS     (??RTCDateTime + 3), R19
//  218         RTCDateTime.weekDay = weekDay(RTCDateTime.year, RTCDateTime.month, RTCDateTime.day);
        RCALL   ?Subroutine15
//  219       }
??CrossCallReturnLabel_30:
        RCALL   ??weekDay
        STS     (??RTCDateTime + 7), R16
//  220 
//  221       if (_setTime)
??setDateTime_3:
        TST     R7
        BREQ    ??setDateTime_6
//  222       {
//  223         RTCDateTime.hour = _hour % 24;
        LDI     R20, 24
        MOV     R16, R6
        RCALL   ?Subroutine12
??CrossCallReturnLabel_19:
        STS     (??RTCDateTime + 4), R0
//  224         RTCDateTime.minute = _minute % 60;
        LDI     R20, 60
        MOV     R16, R5
        RCALL   ?Subroutine12
??CrossCallReturnLabel_20:
        STS     (??RTCDateTime + 5), R0
//  225         RTCDateTime.second = _second % 60;
        LDI     R20, 60
        MOV     R16, R24
        RCALL   ?Subroutine12
//  226       }
??CrossCallReturnLabel_21:
        STS     (??RTCDateTime + 6), R0
//  227 
//  228       RTCDateTime.summerTime = isSummerTime(&RTCDateTime, true);
??setDateTime_6:
        RCALL   ?Subroutine7
//  229 
//  230       clearTicks();
??CrossCallReturnLabel_10:
        RCALL   ??clearTicks
//  231 
//  232       MainThread::calcIsDeviceActiveBySchedule();
        RCALL   ?Subroutine9
//  233       GLOBAL::Counter::setUpdateCounter();
//  234       DeviceManager::saveDeviceStatus();
??CrossCallReturnLabel_15:
        CALL    ??saveDeviceStatus
//  235     }
        RCALL   ?Subroutine11
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R4 SameValue
          CFI CFA_Y Y+5
??CrossCallReturnLabel_18:
        LD      R5, Y+
          CFI R5 SameValue
          CFI CFA_Y Y+4
        LD      R6, Y+
          CFI R6 SameValue
          CFI CFA_Y Y+3
        LD      R7, Y+
          CFI R7 SameValue
          CFI CFA_Y Y+2
        LD      R8, Y+
          CFI R8 SameValue
          CFI CFA_Y Y+1
        ADIW    R29:R28, 1
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(1)
?Subroutine12:
          CFI Block cfiCond28 Using cfiCommon2
          CFI Function ??setDateTime
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R24 Frame(CFA_Y, -10)
          CFI R25 Frame(CFA_Y, -9)
          CFI R26 Frame(CFA_Y, -8)
          CFI R27 Frame(CFA_Y, -7)
          CFI R4 Frame(CFA_Y, -6)
          CFI R5 Frame(CFA_Y, -5)
          CFI R6 Frame(CFA_Y, -4)
          CFI R7 Frame(CFA_Y, -3)
          CFI R8 Frame(CFA_Y, -2)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+10
          CFI Block cfiCond29 Using cfiCommon2
          CFI (cfiCond29) Function ??setDateTime
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond29) R24 Frame(CFA_Y, -10)
          CFI (cfiCond29) R25 Frame(CFA_Y, -9)
          CFI (cfiCond29) R26 Frame(CFA_Y, -8)
          CFI (cfiCond29) R27 Frame(CFA_Y, -7)
          CFI (cfiCond29) R4 Frame(CFA_Y, -6)
          CFI (cfiCond29) R5 Frame(CFA_Y, -5)
          CFI (cfiCond29) R6 Frame(CFA_Y, -4)
          CFI (cfiCond29) R7 Frame(CFA_Y, -3)
          CFI (cfiCond29) R8 Frame(CFA_Y, -2)
          CFI (cfiCond29) CFA_SP SP+4
          CFI (cfiCond29) CFA_Y Y+10
          CFI Block cfiCond30 Using cfiCommon2
          CFI (cfiCond30) Function ??setDateTime
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond30) R24 Frame(CFA_Y, -10)
          CFI (cfiCond30) R25 Frame(CFA_Y, -9)
          CFI (cfiCond30) R26 Frame(CFA_Y, -8)
          CFI (cfiCond30) R27 Frame(CFA_Y, -7)
          CFI (cfiCond30) R4 Frame(CFA_Y, -6)
          CFI (cfiCond30) R5 Frame(CFA_Y, -5)
          CFI (cfiCond30) R6 Frame(CFA_Y, -4)
          CFI (cfiCond30) R7 Frame(CFA_Y, -3)
          CFI (cfiCond30) R8 Frame(CFA_Y, -2)
          CFI (cfiCond30) CFA_SP SP+4
          CFI (cfiCond30) CFA_Y Y+10
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        JMP     ?UC_DIVMOD_L01
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG CODE:CODE:NOROOT(1)
?Subroutine10:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function ??processIdleTime
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R24 Frame(CFA_Y, -5)
          CFI R25 Frame(CFA_Y, -4)
          CFI R26 Frame(CFA_Y, -3)
          CFI R27 Frame(CFA_Y, -2)
          CFI R4 Frame(CFA_Y, -1)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+5
          CFI Block cfiCond33 Using cfiCommon2
          CFI (cfiCond33) Function ??setDateTime
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond33) R24 Frame(CFA_Y, -10)
          CFI (cfiCond33) R25 Frame(CFA_Y, -9)
          CFI (cfiCond33) R26 Frame(CFA_Y, -8)
          CFI (cfiCond33) R27 Frame(CFA_Y, -7)
          CFI (cfiCond33) R4 Frame(CFA_Y, -6)
          CFI (cfiCond33) R5 Frame(CFA_Y, -5)
          CFI (cfiCond33) R6 Frame(CFA_Y, -4)
          CFI (cfiCond33) R7 Frame(CFA_Y, -3)
          CFI (cfiCond33) R8 Frame(CFA_Y, -2)
          CFI (cfiCond33) CFA_SP SP+4
          CFI (cfiCond33) CFA_Y Y+10
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        LDI     R30, LOW(??DaysInMonth)
        LDI     R31, (??DaysInMonth) >> 8
        ADD     R30, R0
        ADC     R31, R1
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34

        RSEG CODE:CODE:NOROOT(1)
?Subroutine4:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function ??processIdleTime
          CFI Conditional ??CrossCallReturnLabel_4
          CFI CFA_SP SP+4
          CFI Block cfiCond36 Using cfiCommon2
          CFI (cfiCond36) Function ??setDateTime
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond36) R5 Frame(CFA_Y, -5)
          CFI (cfiCond36) R6 Frame(CFA_Y, -4)
          CFI (cfiCond36) R7 Frame(CFA_Y, -3)
          CFI (cfiCond36) R8 Frame(CFA_Y, -2)
          CFI (cfiCond36) CFA_SP SP+4
          CFI (cfiCond36) CFA_Y Y+5
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        ST      -Y, R4
          CFI (cfiCond35) R4 Frame(CFA_Y, -1)
          CFI (cfiCond35) CFA_Y Y+1
          CFI (cfiCond36) R4 Frame(CFA_Y, -6)
          CFI (cfiCond36) CFA_Y Y+6
          CFI (cfiPicker37) R4 Frame(CFA_Y, -1)
        ST      -Y, R27
          CFI (cfiCond35) R27 Frame(CFA_Y, -2)
          CFI (cfiCond35) CFA_Y Y+2
          CFI (cfiCond36) R27 Frame(CFA_Y, -7)
          CFI (cfiCond36) CFA_Y Y+7
          CFI (cfiPicker37) R27 Frame(CFA_Y, -2)
        ST      -Y, R26
          CFI (cfiCond35) R26 Frame(CFA_Y, -3)
          CFI (cfiCond35) CFA_Y Y+3
          CFI (cfiCond36) R26 Frame(CFA_Y, -8)
          CFI (cfiCond36) CFA_Y Y+8
          CFI (cfiPicker37) R26 Frame(CFA_Y, -3)
        ST      -Y, R25
          CFI (cfiCond35) R25 Frame(CFA_Y, -4)
          CFI (cfiCond35) CFA_Y Y+4
          CFI (cfiCond36) R25 Frame(CFA_Y, -9)
          CFI (cfiCond36) CFA_Y Y+9
          CFI (cfiPicker37) R25 Frame(CFA_Y, -4)
        ST      -Y, R24
          CFI (cfiCond35) R24 Frame(CFA_Y, -5)
          CFI (cfiCond35) CFA_Y Y+5
          CFI (cfiCond36) R24 Frame(CFA_Y, -10)
          CFI (cfiCond36) CFA_Y Y+10
          CFI (cfiPicker37) R24 Frame(CFA_Y, -5)
        RET
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function ??weekDay
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R4 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+3
          CFI Block cfiCond39 Using cfiCommon2
          CFI (cfiCond39) Function ??setDateTime
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond39) R24 Frame(CFA_Y, -10)
          CFI (cfiCond39) R25 Frame(CFA_Y, -9)
          CFI (cfiCond39) R26 Frame(CFA_Y, -8)
          CFI (cfiCond39) R27 Frame(CFA_Y, -7)
          CFI (cfiCond39) R4 Frame(CFA_Y, -6)
          CFI (cfiCond39) R5 Frame(CFA_Y, -5)
          CFI (cfiCond39) R6 Frame(CFA_Y, -4)
          CFI (cfiCond39) R7 Frame(CFA_Y, -3)
          CFI (cfiCond39) R8 Frame(CFA_Y, -2)
          CFI (cfiCond39) CFA_SP SP+4
          CFI (cfiCond39) CFA_Y Y+10
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        SBCI    R17, 0
        LDI     R20, 12
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40
        REQUIRE ?Subroutine13
        ;               // Fall through to label ?Subroutine13

        RSEG CODE:CODE:NOROOT(1)
?Subroutine13:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function ??isSummerTime
          CFI Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_0
          CFI CFA_SP SP+6
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function ??isSummerTime
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_1
          CFI (cfiCond42) CFA_SP SP+6
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function ??weekDay
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond43) R4 Frame(CFA_Y, -3)
          CFI (cfiCond43) R6 Frame(CFA_Y, -2)
          CFI (cfiCond43) R7 Frame(CFA_Y, -1)
          CFI (cfiCond43) CFA_SP SP+4
          CFI (cfiCond43) CFA_Y Y+3
          CFI Block cfiCond44 Using cfiCommon2
          CFI (cfiCond44) Function ??setDateTime
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond44) R24 Frame(CFA_Y, -10)
          CFI (cfiCond44) R25 Frame(CFA_Y, -9)
          CFI (cfiCond44) R26 Frame(CFA_Y, -8)
          CFI (cfiCond44) R27 Frame(CFA_Y, -7)
          CFI (cfiCond44) R4 Frame(CFA_Y, -6)
          CFI (cfiCond44) R5 Frame(CFA_Y, -5)
          CFI (cfiCond44) R6 Frame(CFA_Y, -4)
          CFI (cfiCond44) R7 Frame(CFA_Y, -3)
          CFI (cfiCond44) R8 Frame(CFA_Y, -2)
          CFI (cfiCond44) CFA_SP SP+4
          CFI (cfiCond44) CFA_Y Y+10
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function ??processIdleTime
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond45) R24 Frame(CFA_Y, -5)
          CFI (cfiCond45) R25 Frame(CFA_Y, -4)
          CFI (cfiCond45) R26 Frame(CFA_Y, -3)
          CFI (cfiCond45) R27 Frame(CFA_Y, -2)
          CFI (cfiCond45) R4 Frame(CFA_Y, -1)
          CFI (cfiCond45) CFA_SP SP+4
          CFI (cfiCond45) CFA_Y Y+5
          CFI Block cfiCond46 Using cfiCommon2
          CFI (cfiCond46) Function ??setDateTime
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond46) R24 Frame(CFA_Y, -10)
          CFI (cfiCond46) R25 Frame(CFA_Y, -9)
          CFI (cfiCond46) R26 Frame(CFA_Y, -8)
          CFI (cfiCond46) R27 Frame(CFA_Y, -7)
          CFI (cfiCond46) R4 Frame(CFA_Y, -6)
          CFI (cfiCond46) R5 Frame(CFA_Y, -5)
          CFI (cfiCond46) R6 Frame(CFA_Y, -4)
          CFI (cfiCond46) R7 Frame(CFA_Y, -3)
          CFI (cfiCond46) R8 Frame(CFA_Y, -2)
          CFI (cfiCond46) CFA_SP SP+4
          CFI (cfiCond46) CFA_Y Y+10
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        LDI     R21, 0
        JMP     ?SS_DIVMOD_L02
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
//  236 

        RSEG CODE:CODE:NOROOT(1)
//  237     void setSummerTimeRule(TSummerTimeRule _summerTimeRule)
??setSummerTimeRule:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function ??setSummerTimeRule
//  238     {
        FUNCALL ??setSummerTimeRule, ??isSummerTime
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setSummerTimeRule, ??calcIsDeviceActiveBySchedule
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setSummerTimeRule, ??setUpdateCounter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setSummerTimeRule, ??saveDeviceStatus
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        STS     (??RTCDateTime + 10), R16
//  239       RTCConfig.summerTimeRule = _summerTimeRule;
//  240       RTCDateTime.summerTime = isSummerTime(&RTCDateTime, true);
        RCALL   ?Subroutine7
//  241 
//  242       MainThread::calcIsDeviceActiveBySchedule();
??CrossCallReturnLabel_11:
        RCALL   ?Subroutine9
//  243       GLOBAL::Counter::setUpdateCounter();
//  244       DeviceManager::saveDeviceStatus();
??CrossCallReturnLabel_14:
        JMP     ??saveDeviceStatus
          CFI EndBlock cfiBlock48
//  245     }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine9:
          CFI Block cfiCond49 Using cfiCommon2
          CFI Function ??setDateTime
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R24 Frame(CFA_Y, -10)
          CFI R25 Frame(CFA_Y, -9)
          CFI R26 Frame(CFA_Y, -8)
          CFI R27 Frame(CFA_Y, -7)
          CFI R4 Frame(CFA_Y, -6)
          CFI R5 Frame(CFA_Y, -5)
          CFI R6 Frame(CFA_Y, -4)
          CFI R7 Frame(CFA_Y, -3)
          CFI R8 Frame(CFA_Y, -2)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+10
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function ??setSummerTimeRule
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond50) CFA_SP SP+4
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        CALL    ??calcIsDeviceActiveBySchedule
        JMP     ??setUpdateCounter
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG CODE:CODE:NOROOT(1)
?Subroutine7:
          CFI Block cfiCond52 Using cfiCommon2
          CFI Function ??setDateTime
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R24 Frame(CFA_Y, -10)
          CFI R25 Frame(CFA_Y, -9)
          CFI R26 Frame(CFA_Y, -8)
          CFI R27 Frame(CFA_Y, -7)
          CFI R4 Frame(CFA_Y, -6)
          CFI R5 Frame(CFA_Y, -5)
          CFI R6 Frame(CFA_Y, -4)
          CFI R7 Frame(CFA_Y, -3)
          CFI R8 Frame(CFA_Y, -2)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+10
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function ??setSummerTimeRule
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond53) CFA_SP SP+4
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        LDI     R18, 1
        RCALL   ?Subroutine14
??CrossCallReturnLabel_27:
        STS     (??RTCDateTime + 9), R16
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54

        RSEG CODE:CODE:NOROOT(1)
?Subroutine14:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function ??processIdleTime
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R24 Frame(CFA_Y, -5)
          CFI R25 Frame(CFA_Y, -4)
          CFI R26 Frame(CFA_Y, -3)
          CFI R27 Frame(CFA_Y, -2)
          CFI R4 Frame(CFA_Y, -1)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+5
          CFI Block cfiCond56 Using cfiCommon2
          CFI (cfiCond56) Function ??setDateTime
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_10
          CFI (cfiCond56) R24 Frame(CFA_Y, -10)
          CFI (cfiCond56) R25 Frame(CFA_Y, -9)
          CFI (cfiCond56) R26 Frame(CFA_Y, -8)
          CFI (cfiCond56) R27 Frame(CFA_Y, -7)
          CFI (cfiCond56) R4 Frame(CFA_Y, -6)
          CFI (cfiCond56) R5 Frame(CFA_Y, -5)
          CFI (cfiCond56) R6 Frame(CFA_Y, -4)
          CFI (cfiCond56) R7 Frame(CFA_Y, -3)
          CFI (cfiCond56) R8 Frame(CFA_Y, -2)
          CFI (cfiCond56) CFA_SP SP+6
          CFI (cfiCond56) CFA_Y Y+10
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function ??setSummerTimeRule
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_11
          CFI (cfiCond57) CFA_SP SP+6
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        LDI     R16, LOW(??RTCDateTime)
        LDI     R17, (??RTCDateTime) >> 8
        RJMP    ??isSummerTime
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58
//  246 

        RSEG CODE:CODE:NOROOT(1)
//  247     void correctDateTime(TRTCDateTime* _dateTime, bool _direction)
??correctDateTime:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function ??correctDateTime
//  248     {
        FUNCALL ??correctDateTime, ??isLeapYear
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??correctDateTime, ??isSummerTime
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        MOVW    R27:R26, R17:R16
        MOV     R24, R18
//  249       if ((_dateTime->year < 2000) || (_dateTime->year >= 2100))
        RCALL   ?Subroutine15
??CrossCallReturnLabel_31:
        SBIW    R27:R26, 1
        SUBI    R16, 208
        SBCI    R17, 7
        CPI     R16, 100
        SBCI    R17, 0
        BRCS    ??correctDateTime_1
//  250       {
//  251         _dateTime->year = _direction ? 2000 : 2099;
        TST     R18
        BREQ    ??correctDateTime_2
        LDI     R16, 208
        LDI     R17, 7
        RJMP    ??correctDateTime_3
??correctDateTime_2:
        LDI     R16, 51
        LDI     R17, 8
??correctDateTime_3:
        ST      X+, R16
        ST      X, R17
        SBIW    R27:R26, 1
//  252       }
//  253 
//  254       _dateTime->leapYear = isLeapYear(_dateTime->year);
??correctDateTime_1:
        RCALL   ?Subroutine6
??CrossCallReturnLabel_8:
        MOVW    R31:R30, R27:R26
        STD     Z+8, R16
//  255 
//  256       if ((_dateTime->month < 1) || (_dateTime->month > 12))
        LDD     R17, Z+2
        DEC     R17
        CPI     R17, 12
        BRCS    ??correctDateTime_4
//  257       {
//  258         _dateTime->month = _direction ? 1 : 12;
        TST     R24
        BREQ    ??correctDateTime_5
        LDI     R17, 1
        RJMP    ??correctDateTime_6
??correctDateTime_5:
        LDI     R17, 12
??correctDateTime_6:
        STD     Z+2, R17
//  259       }
//  260 
//  261       if ((_dateTime->day < 1) || (_dateTime->day > DaysInMonth[_dateTime->leapYear][_dateTime->month]))
??correctDateTime_4:
        LDD     R22, Z+3
        TST     R22
        BREQ    ??correctDateTime_7
        LDI     R17, 13
        MUL     R16, R17
        LDI     R18, LOW(??DaysInMonth)
        LDI     R19, (??DaysInMonth) >> 8
        ADD     R18, R0
        ADC     R19, R1
        LDD     R20, Z+2
        LDI     R21, 0
        ADD     R18, R20
        ADC     R19, R21
        MOVW    R31:R30, R19:R18
        LD      R17, Z
        CP      R17, R22
        BRCC    ??correctDateTime_8
//  262       {
//  263         _dateTime->day = _direction ? 1 : DaysInMonth[_dateTime->leapYear][_dateTime->month];
??correctDateTime_7:
        TST     R24
        BREQ    ??correctDateTime_9
        LDI     R16, 1
        RJMP    ??correctDateTime_10
??correctDateTime_9:
        LDI     R17, 13
        MUL     R16, R17
        LDI     R16, LOW(??DaysInMonth)
        LDI     R17, (??DaysInMonth) >> 8
        ADD     R16, R0
        ADC     R17, R1
        MOVW    R31:R30, R27:R26
        LDD     R18, Z+2
        LDI     R19, 0
        ADD     R16, R18
        ADC     R17, R19
        MOVW    R31:R30, R17:R16
        LD      R16, Z
??correctDateTime_10:
        MOVW    R31:R30, R27:R26
        STD     Z+3, R16
//  264       }
//  265 
//  266       if (_dateTime->hour >= 24)
??correctDateTime_8:
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+4
        CPI     R16, 24
        BRCS    ??correctDateTime_11
//  267       {
//  268         _dateTime->hour = _direction ? 0 : 23;
        TST     R24
        BREQ    ??correctDateTime_12
        LDI     R16, 0
        RJMP    ??correctDateTime_13
??correctDateTime_12:
        LDI     R16, 23
??correctDateTime_13:
        STD     Z+4, R16
//  269       }
//  270 
//  271       if (_dateTime->minute >= 60)
??correctDateTime_11:
        LDD     R16, Z+5
        CPI     R16, 60
        BRCS    ??correctDateTime_14
//  272       {
//  273         _dateTime->minute = _direction ? 0 : 59;
        RCALL   ?Subroutine8
//  274       }
??CrossCallReturnLabel_12:
        STD     Z+5, R16
//  275 
//  276       if (_dateTime->second >= 60)
??correctDateTime_14:
        LDD     R16, Z+6
        CPI     R16, 60
        BRCS    ??correctDateTime_15
//  277       {
//  278         _dateTime->second = _direction ? 0 : 59;
        RCALL   ?Subroutine8
//  279       }
??CrossCallReturnLabel_13:
        STD     Z+6, R16
//  280 
//  281       _dateTime->summerTime = isSummerTime(_dateTime, true);
??correctDateTime_15:
        LDI     R18, 1
        MOVW    R17:R16, R27:R26
        RCALL   ??isSummerTime
        MOVW    R31:R30, R27:R26
        STD     Z+9, R16
//  282     }
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+2
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+1
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock59

        RSEG CODE:CODE:NOROOT(1)
?Subroutine15:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function ??processIdleTime
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R24 Frame(CFA_Y, -5)
          CFI R25 Frame(CFA_Y, -4)
          CFI R26 Frame(CFA_Y, -3)
          CFI R27 Frame(CFA_Y, -2)
          CFI R4 Frame(CFA_Y, -1)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+5
          CFI Block cfiCond61 Using cfiCommon2
          CFI (cfiCond61) Function ??setDateTime
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond61) R24 Frame(CFA_Y, -10)
          CFI (cfiCond61) R25 Frame(CFA_Y, -9)
          CFI (cfiCond61) R26 Frame(CFA_Y, -8)
          CFI (cfiCond61) R27 Frame(CFA_Y, -7)
          CFI (cfiCond61) R4 Frame(CFA_Y, -6)
          CFI (cfiCond61) R5 Frame(CFA_Y, -5)
          CFI (cfiCond61) R6 Frame(CFA_Y, -4)
          CFI (cfiCond61) R7 Frame(CFA_Y, -3)
          CFI (cfiCond61) R8 Frame(CFA_Y, -2)
          CFI (cfiCond61) CFA_SP SP+4
          CFI (cfiCond61) CFA_Y Y+10
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function ??correctDateTime
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond62) R24 Frame(CFA_Y, -3)
          CFI (cfiCond62) R26 Frame(CFA_Y, -2)
          CFI (cfiCond62) R27 Frame(CFA_Y, -1)
          CFI (cfiCond62) CFA_SP SP+4
          CFI (cfiCond62) CFA_Y Y+3
          CFI Block cfiCond63 Using cfiCommon2
          CFI (cfiCond63) Function ??setDateTime
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_9
          CFI (cfiCond63) R24 Frame(CFA_Y, -10)
          CFI (cfiCond63) R25 Frame(CFA_Y, -9)
          CFI (cfiCond63) R26 Frame(CFA_Y, -8)
          CFI (cfiCond63) R27 Frame(CFA_Y, -7)
          CFI (cfiCond63) R4 Frame(CFA_Y, -6)
          CFI (cfiCond63) R5 Frame(CFA_Y, -5)
          CFI (cfiCond63) R6 Frame(CFA_Y, -4)
          CFI (cfiCond63) R7 Frame(CFA_Y, -3)
          CFI (cfiCond63) R8 Frame(CFA_Y, -2)
          CFI (cfiCond63) CFA_SP SP+6
          CFI (cfiCond63) CFA_Y Y+10
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function ??correctDateTime
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_8
          CFI (cfiCond64) R24 Frame(CFA_Y, -3)
          CFI (cfiCond64) R26 Frame(CFA_Y, -2)
          CFI (cfiCond64) R27 Frame(CFA_Y, -1)
          CFI (cfiCond64) CFA_SP SP+6
          CFI (cfiCond64) CFA_Y Y+3
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        LD      R16, X+
        LD      R17, X
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65

        RSEG CODE:CODE:NOROOT(1)
?Subroutine8:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function ??correctDateTime
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R24 Frame(CFA_Y, -3)
          CFI R26 Frame(CFA_Y, -2)
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+3
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function ??correctDateTime
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond67) R24 Frame(CFA_Y, -3)
          CFI (cfiCond67) R26 Frame(CFA_Y, -2)
          CFI (cfiCond67) R27 Frame(CFA_Y, -1)
          CFI (cfiCond67) CFA_SP SP+4
          CFI (cfiCond67) CFA_Y Y+3
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        TST     R24
        BREQ    ??Subroutine8_0
        LDI     R16, 0
        RET
??Subroutine8_0:
        LDI     R16, 59
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG CODE:CODE:NOROOT(1)
?Subroutine6:
          CFI Block cfiCond69 Using cfiCommon2
          CFI Function ??setDateTime
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R24 Frame(CFA_Y, -10)
          CFI R25 Frame(CFA_Y, -9)
          CFI R26 Frame(CFA_Y, -8)
          CFI R27 Frame(CFA_Y, -7)
          CFI R4 Frame(CFA_Y, -6)
          CFI R5 Frame(CFA_Y, -5)
          CFI R6 Frame(CFA_Y, -4)
          CFI R7 Frame(CFA_Y, -3)
          CFI R8 Frame(CFA_Y, -2)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+10
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function ??correctDateTime
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond70) R24 Frame(CFA_Y, -3)
          CFI (cfiCond70) R26 Frame(CFA_Y, -2)
          CFI (cfiCond70) R27 Frame(CFA_Y, -1)
          CFI (cfiCond70) CFA_SP SP+4
          CFI (cfiCond70) CFA_Y Y+3
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        RCALL   ?Subroutine15
??CrossCallReturnLabel_32:
        SBIW    R27:R26, 1
        RJMP    ??isLeapYear
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71
//  283 

        RSEG CODE:CODE:NOROOT(1)
//  284     void setDate(unsigned short _year, unsigned char _month, unsigned char _day)
??setDate:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function ??setDate
//  285     {
        FUNCALL ??setDate, ??setDateTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        MOVW    R1:R0, R17:R16
//  286       setDateTime(true, _year, _month, _day, false, 0, 0, 0);
        LDI     R16, 0
        ST      -Y, R16
          CFI CFA_Y Y+1
        LDI     R23, 0
        LDI     R22, 0
        LDI     R21, 0
        MOV     R20, R19
        MOV     R17, R18
        MOVW    R19:R18, R1:R0
        LDI     R16, 1
        RJMP    ??setDateTime
          CFI EndBlock cfiBlock72
//  287     }
//  288 

        RSEG CODE:CODE:NOROOT(1)
//  289     void setTime(unsigned char _hour, unsigned char _minute, unsigned char _second)
??setTime:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function ??setTime
//  290     {
//  291       setDateTime(false, 0, 0, 0, true, _hour, _minute, _second);
        FUNCALL ??setTime, ??setDateTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R18
          CFI CFA_Y Y+1
        MOVW    R23:R22, R17:R16
        LDI     R21, 1
        LDI     R20, 0
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        LDI     R16, 0
        RJMP    ??setDateTime
          CFI EndBlock cfiBlock73
//  292     }
//  293 

        RSEG CODE:CODE:NOROOT(1)
//  294     void setDateTime(unsigned short _year, unsigned char _month, unsigned char _day,
??setDateTime_1:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function ??setDateTime_1
//  295                      unsigned char _hour, unsigned char _minute, unsigned char _second)
//  296     {
        FUNCALL ??setDateTime_1, ??setDateTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        MOV     R1, R17
//  297       setDateTime(true, _year, _month, _day, true, _hour, _minute, _second);
        RCALL   ?Subroutine3
          CFI CFA_Y Y+1
??CrossCallReturnLabel_2:
        RJMP    ??setDateTime
          CFI EndBlock cfiBlock74
//  298     }
//  299 

        RSEG CODE:CODE:NOROOT(1)
//  300     void setDateTime(TRTCDateTime* _dateTime)
??setDateTime_2:
          CFI Block cfiBlock75 Using cfiCommon0
          CFI Function ??setDateTime_2
//  301     {
        FUNCALL ??setDateTime_2, ??correctDateTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL ??setDateTime_2, ??setDateTime
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R27:R26, R17:R16
//  302       correctDateTime(_dateTime, false);
        LDI     R18, 0
        RCALL   ??correctDateTime
//  303       setDateTime(true, _dateTime->year, _dateTime->month, _dateTime->day,
//  304                   true, _dateTime->hour, _dateTime->minute, _dateTime->second);
        ADIW    R27:R26, 6
        LD      R16, X
        ST      -Y, R16
          CFI CFA_Y Y+3
        LD      R23, -X
        LD      R22, -X
        LDI     R21, 1
        LD      R20, -X
        LD      R17, -X
        SBIW    R27:R26, 2
        LD      R18, X+
        LD      R19, X
        LDI     R16, 1
        RCALL   ??setDateTime
          CFI CFA_Y Y+2
//  305     }
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+1
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock75
//  306 

        RSEG CODE:CODE:NOROOT(1)
//  307     void init(unsigned short _year, unsigned char _month, unsigned char _day,
??init:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function ??init
//  308               unsigned char _hour, unsigned char _minute, unsigned char _second,
//  309               TSummerTimeRule _summerTimeRule)
//  310     {
        FUNCALL ??init, ??setDateTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        MOV     R1, R17
//  311       RTCConfig.summerTimeRule = _summerTimeRule;
        STS     (??RTCDateTime + 10), R23
//  312       setDateTime(_year, _month, _day, _hour, _minute, _second);
        RCALL   ?Subroutine3
          CFI CFA_Y Y+1
??CrossCallReturnLabel_3:
        RJMP    ??setDateTime
          CFI EndBlock cfiBlock76
//  313     }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function ??setDateTime_1
          CFI Conditional ??CrossCallReturnLabel_2
          CFI CFA_SP SP+4
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function ??init
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond78) CFA_SP SP+4
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        ST      -Y, R22
          CFI (cfiCond77) CFA_Y Y+1
          CFI (cfiCond78) CFA_Y Y+1
        MOVW    R23:R22, R21:R20
        LDI     R21, 1
        MOV     R20, R19
        MOV     R17, R18
        MOV     R18, R16
        MOV     R19, R1
        LDI     R16, 1
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,022H
__?EEARH:

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for DaysInMonth>`:
        DC8 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 0, 31, 29, 31
        DC8 30, 31, 30, 31, 31, 30, 31, 30, 31

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for RTCDateTime>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for RTCConfig>`:
        DC8 0
`?<Initializer for cycleTimerLowBatteryCheck>`:
        DC8 15

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
//  314   }
//  315 }
//  316 
//  317 #endif
//  318 
// 
// 1 294 bytes in segment CODE
//    12 bytes in segment INITTAB
//    38 bytes in segment NEAR_I
//    38 bytes in segment NEAR_ID
//     1 byte  in segment NEAR_Z
// 
// 1 332 bytes of CODE memory (+ 12 bytes shared)
//    39 bytes of DATA memory
//
//Errors: none
//Warnings: none

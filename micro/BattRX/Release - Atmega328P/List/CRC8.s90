///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.12.1.50500 for Atmel AVR       02/Aug/2014  01:50:52 /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\Projects\BatteryCounter\_micro\BattRX\CRC8.cpp       /
//    Command line =  D:\Projects\BatteryCounter\_micro\BattRX\CRC8.cpp       /
//                    --cpu=m328p -ms -o "D:\Projects\BatteryCounter\_micro\B /
//                    attRX\Release - Atmega328P\Obj\" -D NDEBUG -lA          /
//                    "D:\Projects\BatteryCounter\_micro\BattRX\Release -     /
//                    Atmega328P\List\" --initializers_in_flash               /
//                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e             /
//                    --eeprom_size 1024 --dlib --dlib_config "C:\Program     /
//                    Files (x86)\IAR Systems\Embedded Workbench              /
//                    6.0\avr\LIB\DLIB\dlAVR-3s-ec_mul-sf-n.h" --eec++ -Ohs   /
//    List file    =  D:\Projects\BatteryCounter\_micro\BattRX\Release -      /
//                    Atmega328P\List\CRC8.s90                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CRC8

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega328P"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??calcCRC8
        FUNCTION ??calcCRC8,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
// D:\Projects\BatteryCounter\_micro\BattRX\CRC8.cpp
//    1 #ifndef __CRC8_CPP_
//    2 #define __CRC8_CPP_
//    3 
//    4 #include "CRC8.h"
//    5 
//    6 /*
//    7   Name  : CRC-8
//    8   Poly  : 0x31    x^8 + x^5 + x^4 + 1
//    9   Init  : 0xFF
//   10   Revert: false
//   11   XorOut: 0x00
//   12   Check : 0xF7 ("123456789")
//   13   MaxLen: 15 байт(127 бит) - обнаружение
//   14     одинарных, двойных, тройных и всех нечетных ошибок
//   15 */
//   16 
//   17 namespace CRC8
//   18 {

        RSEG CODE:CODE:NOROOT(1)
//   19   TCRC8 calcCRC8(unsigned char* _data, unsigned char _cnt)
??calcCRC8:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ??calcCRC8
//   20   {
//   21     unsigned char crc8 = 0xFF;
        LDI     R19, 255
        TST     R18
        BREQ    ??calcCRC8_1
        MOV     R20, R18
//   22 
//   23     while (_cnt > 0)
//   24     {
//   25         crc8 ^= *_data;
??calcCRC8_2:
        MOVW    R31:R30, R17:R16
        LD      R18, Z
        EOR     R19, R18
//   26 
//   27         for (unsigned char j = 0; j < 8; j++)
        LDI     R18, 8
//   28         {
//   29             crc8 = (crc8 & 0x80) ? (crc8 << 1) ^ 0x31 : crc8 << 1;
??calcCRC8_3:
        MOV     R21, R19
        LSL     R21
        BST     R19, 7
        MOV     R19, R21
        BRTC    ??calcCRC8_4
        LDI     R21, 49
        EOR     R19, R21
//   30         }
??calcCRC8_4:
        DEC     R18
        BRNE    ??calcCRC8_3
//   31 
//   32         _cnt--;
//   33         _data++;
        SUBI    R16, 255
        SBCI    R17, 255
        DEC     R20
//   34     }
        BRNE    ??calcCRC8_2
//   35 
//   36     return crc8;
??calcCRC8_1:
        MOV     R16, R19
        RET
          CFI EndBlock cfiBlock0
//   37   }

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,022H
__?EEARH:

        END
//   38 }
//   39 
//   40 /*
//   41 namespace CRC8
//   42 {
//   43   __flash const unsigned char CRC8Table[256] = {
//   44     0x00, 0x31, 0x62, 0x53, 0xC4, 0xF5, 0xA6, 0x97,
//   45     0xB9, 0x88, 0xDB, 0xEA, 0x7D, 0x4C, 0x1F, 0x2E,
//   46     0x43, 0x72, 0x21, 0x10, 0x87, 0xB6, 0xE5, 0xD4,
//   47     0xFA, 0xCB, 0x98, 0xA9, 0x3E, 0x0F, 0x5C, 0x6D,
//   48     0x86, 0xB7, 0xE4, 0xD5, 0x42, 0x73, 0x20, 0x11,
//   49     0x3F, 0x0E, 0x5D, 0x6C, 0xFB, 0xCA, 0x99, 0xA8,
//   50     0xC5, 0xF4, 0xA7, 0x96, 0x01, 0x30, 0x63, 0x52,
//   51     0x7C, 0x4D, 0x1E, 0x2F, 0xB8, 0x89, 0xDA, 0xEB,
//   52     0x3D, 0x0C, 0x5F, 0x6E, 0xF9, 0xC8, 0x9B, 0xAA,
//   53     0x84, 0xB5, 0xE6, 0xD7, 0x40, 0x71, 0x22, 0x13,
//   54     0x7E, 0x4F, 0x1C, 0x2D, 0xBA, 0x8B, 0xD8, 0xE9,
//   55     0xC7, 0xF6, 0xA5, 0x94, 0x03, 0x32, 0x61, 0x50,
//   56     0xBB, 0x8A, 0xD9, 0xE8, 0x7F, 0x4E, 0x1D, 0x2C,
//   57     0x02, 0x33, 0x60, 0x51, 0xC6, 0xF7, 0xA4, 0x95,
//   58     0xF8, 0xC9, 0x9A, 0xAB, 0x3C, 0x0D, 0x5E, 0x6F,
//   59     0x41, 0x70, 0x23, 0x12, 0x85, 0xB4, 0xE7, 0xD6,
//   60     0x7A, 0x4B, 0x18, 0x29, 0xBE, 0x8F, 0xDC, 0xED,
//   61     0xC3, 0xF2, 0xA1, 0x90, 0x07, 0x36, 0x65, 0x54,
//   62     0x39, 0x08, 0x5B, 0x6A, 0xFD, 0xCC, 0x9F, 0xAE,
//   63     0x80, 0xB1, 0xE2, 0xD3, 0x44, 0x75, 0x26, 0x17,
//   64     0xFC, 0xCD, 0x9E, 0xAF, 0x38, 0x09, 0x5A, 0x6B,
//   65     0x45, 0x74, 0x27, 0x16, 0x81, 0xB0, 0xE3, 0xD2,
//   66     0xBF, 0x8E, 0xDD, 0xEC, 0x7B, 0x4A, 0x19, 0x28,
//   67     0x06, 0x37, 0x64, 0x55, 0xC2, 0xF3, 0xA0, 0x91,
//   68     0x47, 0x76, 0x25, 0x14, 0x83, 0xB2, 0xE1, 0xD0,
//   69     0xFE, 0xCF, 0x9C, 0xAD, 0x3A, 0x0B, 0x58, 0x69,
//   70     0x04, 0x35, 0x66, 0x57, 0xC0, 0xF1, 0xA2, 0x93,
//   71     0xBD, 0x8C, 0xDF, 0xEE, 0x79, 0x48, 0x1B, 0x2A,
//   72     0xC1, 0xF0, 0xA3, 0x92, 0x05, 0x34, 0x67, 0x56,
//   73     0x78, 0x49, 0x1A, 0x2B, 0xBC, 0x8D, 0xDE, 0xEF,
//   74     0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
//   75     0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC};
//   76 
//   77   TCRC8 calcCRC8(unsigned char* _data, unsigned char _cnt)
//   78   {
//   79       TCRC8 crc8 = 0xFF;
//   80 
//   81       while (_cnt > 0)
//   82       {
//   83         crc8 = CRC8Table[crc8 ^ *_data];
//   84         _cnt--;
//   85         _data++;
//   86       }
//   87 
//   88       return crc8;
//   89   }
//   90 }
//   91 */
//   92 
//   93 #endif
// 
// 46 bytes in segment CODE
// 
// 46 bytes of CODE memory
//
//Errors: none
//Warnings: none
